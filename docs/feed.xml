<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="https://mcataford.github.io/TalkPythonToMe/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mcataford.github.io/TalkPythonToMe/" rel="alternate" type="text/html" /><updated>2018-02-15T23:29:20-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/</id><title type="html">Learning Python</title><subtitle></subtitle><entry><title type="html">Objects</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/objects.html" rel="alternate" type="text/html" title="Objects" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/objects</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/objects.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Built-in modules</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/modules.html" rel="alternate" type="text/html" title="Built-in modules" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/modules</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/modules.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Control flow</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/loops.html" rel="alternate" type="text/html" title="Control flow" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/loops</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/loops.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Data structure basics</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/data-structures.html" rel="alternate" type="text/html" title="Data structure basics" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/data-structures</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/data-structures.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Control flow</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/conditionals.html" rel="alternate" type="text/html" title="Control flow" /><published>2018-02-12T10:05:23-05:00</published><updated>2018-02-12T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/conditionals</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/conditionals.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Web scraping</title><link href="https://mcataford.github.io/TalkPythonToMe/workshops/webscraping.html" rel="alternate" type="text/html" title="Web scraping" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/workshops/webscraping</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/workshops/webscraping.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this model, you can create variables of any of the types we’ve manipulated before:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Marc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since variables are symbolic replacements, we can then use those variables by inserting their names, &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; where appropriate. We could make use of concatenation with all three to produce a sentence with embedded data:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we’ve seen before, the calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt; will convert &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; from their respective primitive types to strings, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; will concatenate all those strings together into &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello! My name is Marc and I am 27 years old. I am 180.1 centimetres high.&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Python basics</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/basics.html" rel="alternate" type="text/html" title="Python basics" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/basics</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/basics.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;functions&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#ic-math&quot;&gt;Mathematical operations&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#operations-prim&quot;&gt;Operations on primitives&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#operations-obj&quot;&gt;Operations on objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#operations-data-type1&quot;&gt;Operations and data types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scripts&quot;&gt;Writing scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#commenting&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or function defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&quot;operations-prim&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;operations-obj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;operations-data-types&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called functions):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;25-creating-and-modifying-variables&quot;&gt;2.5 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this model, you can create variables of any of the types we’ve manipulated before:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Marc&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since variables are symbolic replacements, we can then use those variables by inserting their names, &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; where appropriate. We could make use of concatenation with all three to produce a sentence with embedded data:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we’ve seen before, the calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt; will convert &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; from their respective primitive types to strings, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; will concatenate all those strings together into &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello! My name is Marc and I am 27 years old. I am 180.1 centimetres high.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;scripts&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-writing-scripts&quot;&gt;3. Writing scripts&lt;/h1&gt;

&lt;p&gt;To progress further and to start building any sort of project, we will need to be able to execute a multitude of statements at once. To accomplish this, we will write &lt;strong&gt;scripts&lt;/strong&gt;, or sequences of statements that will be executed all at once instead of one-by-one as we did so far in the interactive console.&lt;/p&gt;

&lt;p&gt;To write a script, simply save a sequence of statements, one per line, in a file bearing the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.py&lt;/code&gt;. This will be called a &lt;strong&gt;Python script file&lt;/strong&gt;. To execute it all at once, we will not use the interactive console, as it is meant for line-by-line execution. We will turn out attention to IDLE.&lt;/p&gt;

&lt;p&gt;Using IDLE, you can create a new script file through the &lt;em&gt;File&lt;/em&gt; menu. This opens up a new window in which you can type your script. Just like any other text file, you can save and open scripts using IDLE; this way, you can revisit them later as needed. Once your script file contains statements and is saved, the &lt;em&gt;Run&lt;/em&gt; menu will allow you to execute your script file (&lt;em&gt;Run module&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example, consider the follow sample script: it contains our last experiment with concatenation:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Marc&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When executing your script, the interpreter will work its way from the top to the bottom and execute your statements one at a time. Since the interpreter is never aware of the whole file, it will only raise an error if it tries to execute a faulty statement.&lt;/p&gt;

&lt;p&gt;Notice the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt;. Since we are no longer in the interactive console, output is not longer automatically printed to the screen. The print function &lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt; will solve that issue by printing the string or variable given to it as parameter.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;functions&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-functions&quot;&gt;4. Functions&lt;/h1&gt;

&lt;p&gt;Functions are meant to be &lt;strong&gt;blocks of code you can reuse&lt;/strong&gt;. Just like functions in mathematics, they can accept input and produce output. Python has dozens of built-in functions, a few of which we’ve seen previously:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Prints the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to the screen.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As we go forward, we will add more functions to this list, but the most important part about Python functions isn’t that the language offers a lot of them out-of-the-box but rather than you can make your own.&lt;/p&gt;

&lt;p&gt;The basic model to &lt;strong&gt;define&lt;/strong&gt; a function introduces the &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; keyword:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is executed when the function is called.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few things to consider:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; keyword indicates that a function is being defined;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_function&lt;/code&gt; is the given name of our function, we will use it to call our function later (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;my_function()&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; is a &lt;strong&gt;comma-separated list&lt;/strong&gt; of items that will act as variables within the function;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword “hands back” the output of the function to whoever called the function. An example of this is &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;, which &lt;em&gt;returns&lt;/em&gt; a string made from the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reusing our previous example in which we build a string that introduced us, we could write a function that &lt;em&gt;returns&lt;/em&gt; our concatenated string and takes the three elements as input:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduce_myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once defined, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;introduce_myself()&lt;/code&gt; anywhere in our script and as long as we give it the right parameters (a string, an integer and a float, in that order), it will produce the right output.&lt;/p&gt;

&lt;p&gt;For example, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;introduce_myself(&quot;Marc&quot;, 27, 180.1)&lt;/code&gt; and get the same output string as before.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;commenting&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;5-comments&quot;&gt;5. Comments&lt;/h1&gt;

&lt;p&gt;You might have noticed sentences embedded in code blocks on lines that start with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;. These are called &lt;strong&gt;comments&lt;/strong&gt;. Comments are notes left by the programmer to contextualize code, explain the logic of a certain block or provide guidance on things left to do or fix.&lt;/p&gt;

&lt;p&gt;You can add comments to your code two ways:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# You can write single-line comments using the hashbang sign before the comment text.&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
You can also use three consecutive quotation marks to open a block comment
that can span over multiple lines. Another set of three quotation marks will
close the block comment.
&quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comments are &lt;strong&gt;ignored&lt;/strong&gt; by the interpreter and do not alter the behaviour of your script. You are strongly encouraged to comment your code, as logic that is self-evident today might not remain so through time, and code that you would share might raise questions from other programmers.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Python basics</title><link href="https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html" rel="alternate" type="text/html" title="Python basics" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/problems/basics-problems</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html">&lt;h1 id=&quot;truefalse-questions&quot;&gt;True/False questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;strong&gt;interactive Python console&lt;/strong&gt; prints the output of an operation automatically.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt; operator implements two consecutive products such that &lt;code class=&quot;highlighter-rouge&quot;&gt;a**b = a * b * b&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Primitive data types&lt;/strong&gt; are types of data that can be represented as one or several numbers.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; is an example of a primitive type because each character of a string can be mapped to a number via the &lt;a href=&quot;&quot;&gt;ASCII table&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean values&lt;/strong&gt; can be represented as numbers.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; is represented by a collection of characters surrounded by &lt;strong&gt;double quotes&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; are two operators defined for &lt;strong&gt;strings&lt;/strong&gt;; other operators are not defined and will raise an error if used with string operands.&lt;/li&gt;
  &lt;li&gt;To concatenate two values, you must first convert them using &lt;code class=&quot;highlighter-rouge&quot;&gt;string(x)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can only concatenate two values at a time.&lt;/li&gt;
  &lt;li&gt;When defining variables, the &lt;strong&gt;data type&lt;/strong&gt; must be mentioned as well as the name and initial value.&lt;/li&gt;
  &lt;li&gt;Any statement that can be written in the interactive Python console can also be written in a script file.&lt;/li&gt;
  &lt;li&gt;Outside of the interactive console,  &lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt; will allow you to print output to the screen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt; are defined using the &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; keyword.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comments&lt;/strong&gt; are ignored by the interpreter, as such, you can include as many as you wish.&lt;/li&gt;
  &lt;li&gt;A script file can contain both space and tab &lt;strong&gt;indentation&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;short-answer-questions&quot;&gt;Short answer questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;What is &lt;strong&gt;concatenation&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator do on &lt;strong&gt;strings&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;What are two ways of adding &lt;strong&gt;comments&lt;/strong&gt; to your scripts?&lt;/li&gt;
  &lt;li&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword do?&lt;/li&gt;
  &lt;li&gt;What is the point of separating code into &lt;strong&gt;functions&lt;/strong&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;programming-questions&quot;&gt;Programming questions&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;For each of the following tasks, you should produce a separate script. Do not hesitate to use comments to document your design process and how your solutions work.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write a Celsius-to-Fahrenheit conversion script. Your final solution should implement the conversion as a &lt;strong&gt;function&lt;/strong&gt; which takes in a temperature in Celsius degrees and outputs a temperature in Fahrenheit degrees. You script should make use of your function and demonstrate the conversion with at least three values. &lt;em&gt;Make sure that your script outputs the results as part of a sentence in which numbers are embedded.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the script of Question 1, add a function that does the opposite conversion. Verify that any Celsius value can be converted to Fahrenheit and then back to Celsius without significant loss of precision.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Given a number such as &lt;code class=&quot;highlighter-rouge&quot;&gt;1.1234&lt;/code&gt;, write a script implementing a function that extracts the &lt;em&gt;fractional part&lt;/em&gt; of the number. You can use the function stub below:&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Hint: Think of what type conversion does to a number.&lt;/em&gt;&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_fractional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#Your code&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;#Make sure to store your result in a variable and pass that variable to return.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;

 &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
 Your function should be able to accept the following input and produce the output:

 1.1234 -&amp;gt; 0.1234
 0 -&amp;gt; 0.0
 1.0 -&amp;gt; 0.0
 &quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a function that &lt;strong&gt;prints&lt;/strong&gt; the following shape:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;++++++++++&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;++++++++++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you modify the function in &lt;em&gt;4&lt;/em&gt; to allow the caller to give as input a parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;? You can leave the height of your shape constant such that the shape is a rectangle of variable width.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">True/False questions</summary></entry><entry><title type="html">Getting started</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/getting-started.html" rel="alternate" type="text/html" title="Getting started" /><published>2018-02-10T10:05:23-05:00</published><updated>2018-02-10T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/getting-started</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/getting-started.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we’ll set up our coding environment and talk about the tools that we will use to learn Python. We’ll also have a quick chat about the best strategies to use this course effectively.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#tools&quot;&gt;Tools overview&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#python&quot;&gt;The Python interpreter and IDLE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git&quot;&gt;Git and Github&lt;/a&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;#account&quot;&gt;Creating an account&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#repo&quot;&gt;Creating a repository&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setting up Git on your computer to access the repository&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#using-git&quot;&gt;Using Git and Github&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#editors&quot;&gt;Other editors&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#app&quot;&gt;Appendix&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#github-education&quot;&gt;Github Education&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;tools&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-tools-overview&quot;&gt;1. Tools overview&lt;/h1&gt;

&lt;p&gt;Python doesn’t require much supporting software: the two things we absolutely need are the &lt;strong&gt;Python interpreter&lt;/strong&gt; and a &lt;strong&gt;code editor you are comfortable with&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;python&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-the-python-interpreter-and-idle&quot;&gt;1.1 The Python interpreter and IDLE&lt;/h2&gt;

&lt;p&gt;This courses uses &lt;strong&gt;Python 3.5.x&lt;/strong&gt;. While you can use previous versions of Python to learn about the language, keep in mind that if you do, syntactic differences will appear along the way that will require you to correct some of the examples. When we will start using third-party modules, the Python version you use will become even more important as different features and module versions are supported by Python 2.7.x and 3.5+. As such, &lt;strong&gt;it is strongly recommended to stick with the recommended version&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Regardless of which computer model you have, you can download the Python 3.5+ interpreter &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;here&lt;/a&gt; by clicking on the appropriate button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_dl.png&quot; alt=&quot;The Python interpreter download page&quot; /&gt;
&lt;em&gt;The Python interpreter download page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The installation package not only contains the interpreter, which will read through our code and execute it, but also &lt;a href=&quot;https://docs.python.org/3/library/idle.html&quot;&gt;IDLE&lt;/a&gt;, an easy to use development environment that facilitates writing code and executing it. For the purposes of our course, we will use IDLE as our code editor. If you wish to grow beyond IDLE and use other tools, see &lt;a href=&quot;&quot;&gt;Other editors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No matter the editor you choose to use, once the interpreter is installed, you have access to the &lt;strong&gt;interactive Python console&lt;/strong&gt;. To verify that everything is in working order, you should do the following:&lt;/p&gt;

&lt;p&gt;First, open up a &lt;strong&gt;command prompt window&lt;/strong&gt;. If you are running any iteration of Windows, you will find it by looking for &lt;strong&gt;Command Prompt&lt;/strong&gt;, and you can look for &lt;strong&gt;Terminal&lt;/strong&gt; on both OSX and Linux. Once your Command Prompt/Terminal window is open, type in the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your interpreter is functional, the interactive console should intialize, showing you which version of Python you are currently using and giving you the opportunity to enter commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli.png&quot; alt=&quot;The interactive Python console&quot; /&gt;
&lt;em&gt;The interactive Python console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In here, you are able to type any Python statement and see output directly, much like in R or Matlab. We will discuss its usefulness later. To exit the interactive console, simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt; and press the return key.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;12-git-and-github&quot;&gt;1.2 Git and Github&lt;/h2&gt;

&lt;p&gt;To keep our code organized, we will use &lt;strong&gt;Git&lt;/strong&gt;. Git is a free and opensource &lt;strong&gt;version control system&lt;/strong&gt; that keeps sharing and keeping track of our projects simple. You can opt to organize your code on your computer as you see fit, but if you choose to use Git, install &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git&lt;/a&gt; and follow the steps below to create an account and link it to your computer.&lt;/p&gt;

&lt;p&gt;We will use Git through the Github, a free service that takes care of maintaining a server on which we can archive our code. To use the service, we will need to create a free account.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;account&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;121-creating-an-account&quot;&gt;1.2.1 Creating an account&lt;/h3&gt;

&lt;p&gt;Creating a Github account is very simple. First, head to &lt;a href=&quot;https//www.github.com&quot;&gt;https//www.github.com&lt;/a&gt; and fill up the sign up form on the front page. Make sure to use a valid email address as you will have to respond to a validation email to complete the setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_signup_1.png&quot; alt=&quot;Github's signup form&quot; /&gt;
&lt;em&gt;Github’s signup form&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you press “Sign up for Github”, you will be taken to the next step: choosing a plan. Github offers paid plans, but for our needs, the free plan is just fine and should be selected by default. If you are currently a student, you most likely quality for the paid version free-of-charge, see the note at the bottom of this page for more details.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_signup_2.png&quot; alt=&quot;Choosing a plan&quot; /&gt;
&lt;em&gt;Choosing a plan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once that is done, you should be taken to an optional poll about your programming practice. Feel free to fill it up or to use the “Skip this step” link at the bottom of the form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_signup_3.png&quot; alt=&quot;Github's usage poll&quot; /&gt;
&lt;em&gt;Github’s usage poll&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once everything is done, you should receive a &lt;strong&gt;confirmation email&lt;/strong&gt; that will unlock the full potential of your account. Make sure that you click the link that’s on there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_signup_4.png&quot; alt=&quot;You cannot go further without confirming&quot; /&gt;
&lt;em&gt;You cannot got further without confirming&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;repo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;122-creating-repositories&quot;&gt;1.2.2 Creating repositories&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Repositories&lt;/strong&gt; are containers for your projects. They allow you to group code together based on what you are working on. You can have as many repositories as you desire; today, we will initialize the first one so we can store our &lt;strong&gt;course material&lt;/strong&gt; in it. Once your email is verified, head to your profile by clicking on the “+” located on the top right of the screen and select “New repository”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_repo_1.png&quot; alt=&quot;Creating a new repository&quot; /&gt;
&lt;em&gt;Accessing the repository creation form&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will take you to a form defining the basic settings of your repository. Make sure that you do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Choose a meaningful name for your repository (this will be how others and yourself will see it online);&lt;/li&gt;
  &lt;li&gt;Tick the “Initialize this repository with a README”;&lt;/li&gt;
  &lt;li&gt;Choose a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file using the “Add .gitignore” button, you can simply type in &lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt; and use the prebuilt one;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that done, you can click “Create repository” .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_repo_2.png&quot; alt=&quot;Repository setup&quot; /&gt;
&lt;em&gt;Repository setup&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The final step to take on Github’s end is to copy the &lt;strong&gt;repository address&lt;/strong&gt;. This will allow you to create a link between your computer and the repository so you can publish your changes without having to access the website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_repo_3.png&quot; alt=&quot;Repository address&quot; /&gt;
&lt;em&gt;Repository address&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;123-setting-up-git-on-your-computer-to-access-the-repository&quot;&gt;1.2.3 Setting up Git on your computer to access the repository&lt;/h2&gt;

&lt;p&gt;Back on Command Prompt or Terminal, you should first type the following to make sure that Git is properly installed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything is set up correctly, this should display the current version of Git.&lt;/p&gt;

&lt;p&gt;You should then navigate to a convenient location to put your Python projects (in this example, we’ll use the My Documents folder):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd C:\Users\&amp;lt;username&amp;gt;\Documents
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: On OSX and Linux, this path will be different: &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/&amp;lt;username&amp;gt;/Documents/&lt;/code&gt; should be equivalent for OSX and &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/&amp;lt;username&amp;gt;/&lt;/code&gt; should be equivalent for Linux&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From there, you can &lt;strong&gt;clone&lt;/strong&gt; the repository you created on Github, thereby creating a directory on your computer which is a copy of the Github-hosted version. This is where we’ll store the code we write so we can synchronize the directory with Github’s servers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &amp;lt;repository address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;repository address&amp;gt;&lt;/code&gt; should have the form &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repository&amp;gt;.git&lt;/code&gt;. In the previous examples, the link copied from Github was &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/pythonisbae/firstproject.git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will create a directory with the same name as your repository containing your files. You can then access it using &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;using-git&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;124-using-git-and-github&quot;&gt;1.2.4 Using Git and Github&lt;/h2&gt;

&lt;p&gt;At this point, you are ready to use Github! You can test your Git setup by modifying any file in the directory you just created (you can open the &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file, for example), going back to the Command Prompt/Terminal and using the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will show you the current modifications made to the repository. The report should look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_commit_1.png&quot; alt=&quot;Repository status&quot; /&gt;
&lt;em&gt;Repository changes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can then use &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; to add all the files to what you want to synchronize and &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;&amp;lt;message&amp;gt;&quot;&lt;/code&gt; to synchronize. Make sure to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;message&amp;gt;&lt;/code&gt; by something meaningful to describe what you changed! This will be useful later when you’ll need to look back at what you’ve done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/github_commit_2.png&quot; alt=&quot;Pushing to Github&quot; /&gt;
&lt;em&gt;Pushing to Github&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If all goes well, you should see a synchronization report like the one above. This means that you have successfully uploaded your material to Github. If you go back to your repository’s page on Github’s website, you should now see your updated file(s).&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;editors&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;13-other-editors&quot;&gt;1.3 Other editors&lt;/h2&gt;

&lt;p&gt;If you want to explore the other editors available on the web and use something else than IDLE, you should check out the editors below. All of them are free and have a rich set of features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm Community Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;app&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;

&lt;p&gt;&lt;a name=&quot;github-education&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;github-education&quot;&gt;Github Education&lt;/h2&gt;

&lt;p&gt;If you are enrolled as a student, you qualify for Github’s education package. Simply sign up &lt;a href=&quot;https://education.github.com/pack/join&quot;&gt;here&lt;/a&gt; and enjoy a set of free code-related perks!&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry></feed>