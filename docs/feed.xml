<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="https://mcataford.github.io/TalkPythonToMe/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mcataford.github.io/TalkPythonToMe/" rel="alternate" type="text/html" /><updated>2018-02-26T00:23:02-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/</id><title type="html">Learning Python</title><subtitle></subtitle><entry><title type="html">Objects</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/objects.html" rel="alternate" type="text/html" title="Objects" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/objects</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/objects.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Built-in modules</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/modules.html" rel="alternate" type="text/html" title="Built-in modules" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/modules</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/modules.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Control flow</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/loops.html" rel="alternate" type="text/html" title="Control flow" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/loops</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/loops.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we discuss &lt;strong&gt;iteration&lt;/strong&gt; and &lt;strong&gt;iterative structures&lt;/strong&gt;. These structures will allow us to repeat operations without having to duplicate code. Ultimately, this will also facilitate data processing by allowing us to “walk” through certain bundles of data.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#iteration&quot;&gt;The value of iteration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#loops&quot;&gt;Loop structures&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#while&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#for&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#convert&quot;&gt;Converting &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; and back&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#examples&quot;&gt;Concrete examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;iteration&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-the-value-of-iteration&quot;&gt;1. The value of iteration&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Iterative structures&lt;/strong&gt; are all about repetition. One of the main perks of harnessing Python’s power to do various tasks is its ability to &lt;em&gt;repeat&lt;/em&gt; operations very fast, effectively taking care of well-defined processing jobs as fast as possible. Whether the goal is to sort a collection of items, to find the solution to a Sudoku puzzle or to calculate the interest you might gain from future savings, the idea of repeating a set of statements a certain number of times or until a certain state is reached is usually part of the solution.&lt;/p&gt;

&lt;p&gt;In Python, &lt;strong&gt;loops&lt;/strong&gt; will allow us to repeat blocks of code at will. This will, amongst other things, allow us to avoid repeating similar sets of statements, kind of like how we captured simple sequences in &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/basics.html#functions&quot;&gt;functions&lt;/a&gt;. They will also allow us to repeat parts of our scripts until certain conditions are met; in the case of user input, for example, we could choose to ask the question again and again, until the answer is satisfactory.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;loops&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-loop-structures&quot;&gt;2. Loop structures&lt;/h1&gt;

&lt;p&gt;Python gives us two categories of loops: &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops. The difference between the two is purely semantic and everything that can be done with one can be done with the other, albeit with different syntax.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;while&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-while-loops&quot;&gt;2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops implement the function “repeat &lt;em&gt;x&lt;/em&gt; as long as &lt;em&gt;condition&lt;/em&gt; holds”, which makes them very similar with &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/conditions.html&quot;&gt;conditional statements&lt;/a&gt;. In fact, they will share a structure almost identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#This code is repeated as long as &quot;condition&quot; is True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By design, &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops are centred around the idea of operating until a certain goal is met. For example, this could be adding up numbers until a certain value is reached, or a certain number of times if a counter variable is used.&lt;/p&gt;

&lt;p&gt;Let’s look at a concrete example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#A counter variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#While the counter is lesser than 10, repeat...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Print the value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Increment the counter&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we are presented with a simple loop that prints numbers from an initial value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to a maximal value of &lt;code class=&quot;highlighter-rouge&quot;&gt;9&lt;/code&gt;. Note that the condition is formatted the same way as it was in conditional statements: in all cases, those conditions are boolean expressions and are bound by the same rules. This means that you can use any of the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/conditionals.html#comparison-ops&quot;&gt;operators&lt;/a&gt; we discussed to put together &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop conditions that fit your needs.&lt;/p&gt;

&lt;p&gt;Also note the last statement of the loop body: &lt;code class=&quot;highlighter-rouge&quot;&gt;counter = counter + 1&lt;/code&gt;. Consider what happens if this statement wouldn’t be present:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set counter to 0&lt;/li&gt;
  &lt;li&gt;Check if counter is lesser than 10&lt;/li&gt;
  &lt;li&gt;Print current counter&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Increment counter&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Go back to &lt;em&gt;1.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this scenario, the loop never ends as the condition &lt;code class=&quot;highlighter-rouge&quot;&gt;counter &amp;lt; 10&lt;/code&gt; is never broken! This is an &lt;strong&gt;infinite loop&lt;/strong&gt; and will cause your script to run until manually terminated. Because it’s neither a syntax or language-related error, no formal exception will be raised by the interpreter. In fact, in some cases, this sort of infinite loop behaviour might even be desirable (but we’ll talk about it later)! In general, however, this is to be avoided as most scripts are meant to have a beginning and an end.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;for&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-for-loops&quot;&gt;2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops&lt;/h2&gt;

&lt;p&gt;Much like their &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; counterpart, &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops will repeat the code that they contain. The major difference between the two is, again, &lt;em&gt;semantic&lt;/em&gt;: a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop will repeat an operation &lt;em&gt;over a collection&lt;/em&gt; rather than until a certain condition is met. They will repeat a certain operation “for all items in a given set of items”:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that manipulates the item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will discuss collections in the next lesson, but for now, let’s consider &lt;strong&gt;strings&lt;/strong&gt;, which are essentially collections of characters. If we apply the previous model to a string, we would then get a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop structure like the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Do something with each character&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the loop “walks through” the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, World!&quot;&lt;/code&gt;, each character is plucked from it and stored temporarily in &lt;code class=&quot;highlighter-rouge&quot;&gt;character&lt;/code&gt;. From there, each character can be manipulated individually. We could, for instance, choose to print each character on a line:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Collections can also be a &lt;strong&gt;range of numbers&lt;/strong&gt; generated using the &lt;code class=&quot;highlighter-rouge&quot;&gt;range(min, max, step)&lt;/code&gt; function, which accepts three input parameters:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Input&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Required&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sets the range minimum (inclusive)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sets the range maximum (exclusive)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sets the jump between each number in the range&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Since only the &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt; parameter is required, any single parameter given to &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt; will be used as a maximum. However, if you choose to give &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt; multiple parameters, you need to ensure the order in which they are supplied. Enter the following statements in the interactive Python console to see their effect firsthand:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Produces the range [0, 1, 2, 3, 4]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Produces the range [2, 3, 4]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Produces the range [0, 2, 4]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: we had to wrap our calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;list()&lt;/code&gt; function to convert each range to a list that we can view. If you choose to use a range in a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, you do not need to add this extra step.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt; parameter has to come first in any multi-parameter usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt;, to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; parameter you will also have to explicitly set &lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt;, even if it means using the default value (&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Combining the &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt; function with our previously defined &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, we can produce a loop that will process each number individually:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Prints each number in the given range.
Our range parameters are min=0, max=10, step=2
Our range is [0, 2, 4, 6, 8]
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;convert&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;23-converting-while-to-for-and-back&quot;&gt;2.3 Converting &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; and back&lt;/h2&gt;

&lt;p&gt;As we mentioned earlier, the main difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops was how the iterative process was phrased. In the former, we repeat an operation &lt;em&gt;as long as a condition is true&lt;/em&gt; and in the latter, we repeat an operation &lt;em&gt;over a range of values or items in a set&lt;/em&gt;. Since the difference isn’t functional, we can often rewrite a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop into a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop and vice-versa.&lt;/p&gt;

&lt;p&gt;Let’s take for example our previous loop example, which prints each number in the range &lt;code class=&quot;highlighter-rouge&quot;&gt;[0, 2, 4, 6, 8]&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To convert this to a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop, we first need to establish which steps our new structure should go through:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initially, &lt;code class=&quot;highlighter-rouge&quot;&gt;number = 0&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;number &amp;lt; 10&lt;/code&gt;;
    &lt;ol&gt;
      &lt;li&gt;Print &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;Increment &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; by 2 such that we skip the odd values&lt;/li&gt;
      &lt;li&gt;Back to &lt;em&gt;2.&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Terminate script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We notice that the condition is essentially phrased as &lt;em&gt;have we reached the value &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt; yet?&lt;/em&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt; became the initial condition for &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; has been converted to a statement which increments the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; by 2.&lt;/p&gt;

&lt;p&gt;Using the list of steps above, we can write down the &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; implementation:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that while both loops are written differently, they are &lt;em&gt;functionality&lt;/em&gt; the same.&lt;/p&gt;

&lt;p&gt;This sort of conversion has one major advantage: as you can see from the examples above, in some cases, a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; formulation is more concise, whereas in others, &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops will produce shorter scripts. It’s also a matter of preference: if you are struggling to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop for a certain task, a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop might offer a simpler alternative.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;examples&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-concrete-examples&quot;&gt;3. Concrete examples&lt;/h1&gt;

&lt;p&gt;Now that we know about loops and conditions, which essentially allow us to repeat tasks and to selectively execute code, we can implement complex behaviour in our scripts. Let’s look at some examples that could be made more interesting using a combination of iteration and conditional execution.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;temperature&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;31-temperature-conversion&quot;&gt;3.1 Temperature conversion&lt;/h2&gt;

&lt;p&gt;Earlier, we discussed the idea of using conditionals as &lt;em&gt;validation&lt;/em&gt; to ensure that a user cannot proceed with operations before submitting valid input. In this case, this could take the form of a loop that can only be exited &lt;em&gt;if&lt;/em&gt; the entered input is a valid number:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Give an initial value to the variable that will contain our user input&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Repeat forever&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Grab user input&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter a temperature in Celsius to convert to Kelvin: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;#If the temperature is higher than the absolute minimum for Celsius, exit the loop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;273.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Otherwise, print error message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid value!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Once our, convert the temperature, assumed to be valid&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kelvin_temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;273.15&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Print the results&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; degrees Celsius is equivalent to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kelvin_temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; degrees Kelvin.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using an &lt;strong&gt;infinite loop&lt;/strong&gt; that is manually exited if the entered value is valid, we can force the user to continuously enter values until a satisfactory temperature is given. In this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; traps the user until the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition, which validates the input, is satisfied.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Data structure basics</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/data-structures.html" rel="alternate" type="text/html" title="Data structure basics" /><published>2018-02-14T10:05:23-05:00</published><updated>2018-02-14T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/data-structures</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/data-structures.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we learn about how we can organize our data using built-in structures such as &lt;strong&gt;tuples&lt;/strong&gt;, &lt;strong&gt;lists&lt;/strong&gt; and &lt;strong&gt;dictionaries&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#dt&quot;&gt;Data structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tuples&quot;&gt;Tuples&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#indices&quot;&gt;Indexing&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lists&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dict&quot;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;dt&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-data-structures&quot;&gt;1. Data structures&lt;/h1&gt;

&lt;p&gt;So far, we have been storing data in &lt;strong&gt;variables&lt;/strong&gt;. This allowed us to save partial results, keep data ready for use later and simplify the implementation of otherwise complex operations. The way we have been using variables so far however raised a problem: if we wanted to store a series of data, say 10 observations of a single phenomenon, we would need en equal number of variables. This quickly becomes problematic as the quantity of data we want to store grows: a program with 100s of variables would quickly become unreadable.&lt;/p&gt;

&lt;p&gt;To work around this, we can use &lt;strong&gt;data structures&lt;/strong&gt; which permit the &lt;strong&gt;common storage of multiple elements under one variable&lt;/strong&gt;. Using these constructs, we will be able to store more than a single piece of data in each variable, which in turn provides us with a way to collect related data together.&lt;/p&gt;

&lt;p&gt;Python defines three main data structures for us: the &lt;strong&gt;tuple&lt;/strong&gt;, the &lt;strong&gt;list&lt;/strong&gt; and the &lt;strong&gt;dictionary&lt;/strong&gt;. We will divide them in two categories: &lt;strong&gt;ordered collections&lt;/strong&gt; (such as tuples and lists, which can be sorted), and &lt;strong&gt;unordered collections&lt;/strong&gt; (which cannot be sorted).&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tuples&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-tuples&quot;&gt;2. Tuples&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Tuples&lt;/strong&gt; are the simplest form of paired data defined by Python. They represent &lt;strong&gt;immutable vectors&lt;/strong&gt;, in other words, groupings of data that cannot be changed once created.&lt;/p&gt;

&lt;p&gt;Tuples can store any number of elements of any type, and can be created using the following syntax:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Marc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that our tuple is defined using a &lt;strong&gt;comma-separated list of element between parentheses&lt;/strong&gt;. The list in question can be of any length necessary.&lt;/p&gt;

&lt;p&gt;Once a tuple is created, individual elements can be accessed using &lt;strong&gt;indices&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;indices&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-indexing&quot;&gt;2.1 Indexing&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Indices&lt;/strong&gt; represent the positions of elements within a collection. In Python, indexing is done using a &lt;strong&gt;zero base&lt;/strong&gt;, which means that the first element of an &lt;strong&gt;ordered collection&lt;/strong&gt; is always &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and the last one, &lt;code class=&quot;highlighter-rouge&quot;&gt;length - 1&lt;/code&gt;. To use indices, we can use the following syntax:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Prints the first element of the tuple 'my_tuple'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because tuples are immutable, we can access elements as we would any other variable, but we cannot use the assignment operator &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;. In fact, any statement of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;collection[index]&lt;/code&gt; will act exactly as the variables we have seen before.&lt;/p&gt;

&lt;p&gt;Since the &lt;strong&gt;length&lt;/strong&gt; of a collection may not always be known (such as in the case where a function receives a tuple as parameter, for example), we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;len(x)&lt;/code&gt; function to find out the length of any collection.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Prints 5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on this, the last element of any ordered collection is always &lt;code class=&quot;highlighter-rouge&quot;&gt;len(collection) - 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lists&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-lists&quot;&gt;3. Lists&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Lists&lt;/strong&gt; are extremely similar to tuples, with the added benefit of being &lt;strong&gt;mutable&lt;/strong&gt;. Just like tuples, they can contain data of differing types (although this is generally discourages for reasons we will discuss in a later section of this lesson), use a &lt;strong&gt;zero-based indexing system&lt;/strong&gt; and can be accessed using the syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;collection[index]&lt;/code&gt;. However, since lists are more complex than tuples, the syntax to create them and to manipulate them will be slightly different:&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lists-new&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;31-creating-lists&quot;&gt;3.1 Creating lists&lt;/h2&gt;

&lt;p&gt;We can create lists using the same kind of statement as with tuples:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we use the square brackets instead of parentheses to encapsulate the comma separated list of values.&lt;/p&gt;

&lt;p&gt;We can also create an &lt;strong&gt;empty list&lt;/strong&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;list()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_empty_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we can &lt;strong&gt;edit&lt;/strong&gt; the list later on, creating empty lists might be quite useful depending on what functions we are trying to implement.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Control flow</title><link href="https://mcataford.github.io/TalkPythonToMe/problems/conditionals-problems.html" rel="alternate" type="text/html" title="Control flow" /><published>2018-02-12T10:05:23-05:00</published><updated>2018-02-12T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/problems/conditionals-problems</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/problems/conditionals-problems.html">&lt;h1 id=&quot;truefalse-questions&quot;&gt;True/False questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; variables can have three values: &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Undefined&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt; operator checks whether a certain element is inside a collection.&lt;/li&gt;
  &lt;li&gt;Because they are not &lt;strong&gt;primitives&lt;/strong&gt;, strings cannot be compared using &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Simple statements can be combined using &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; to build more complex boolean expressions.&lt;/li&gt;
  &lt;li&gt;A boolean expression always &lt;strong&gt;evaluates&lt;/strong&gt; to a boolean value.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks cannot be used alone; they need an accompanying &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; block.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elsif&lt;/code&gt; blocks allow you to add “alternative conditions” to be evaluated if the ones above are &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The following block would only print &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The function of &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; blocks can be emulated using &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks only, but it is much less efficient.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User input&lt;/strong&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; is non-blocking: the script will continue running and will not wait for the user’s input unless the value is used in a later statement.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; can produce integers, floats or strings, depending on the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; parameter given to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;short-answer-questions&quot;&gt;Short answer questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Explain the role of &lt;strong&gt;indentation&lt;/strong&gt; in blocks such as &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Detail one practical example of how &lt;strong&gt;conditional statements&lt;/strong&gt; can be used in scripts.&lt;/li&gt;
  &lt;li&gt;What happens if a conversion function such as &lt;code class=&quot;highlighter-rouge&quot;&gt;int()&lt;/code&gt; is used on a value that does not contain a number?&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;programming-questions&quot;&gt;Programming questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Revisit the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html&quot;&gt;temperature conversion problem&lt;/a&gt; of the last problem set and implement &lt;strong&gt;input validation&lt;/strong&gt; for each of your conversion functions. If the value given to your function is below the minimum acceptable value, you should return the lowest converted value possible, and if the value is above the maximum acceptable value, you should return the highest converted value possible. Think of what the bounds of your input should be.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">True/False questions boolean variables can have three values: True, False and Undefined. The contains operator checks whether a certain element is inside a collection. Because they are not primitives, strings cannot be compared using == and !=. Simple statements can be combined using and and or to build more complex boolean expressions. A boolean expression always evaluates to a boolean value. if blocks cannot be used alone; they need an accompanying else block. elsif blocks allow you to add “alternative conditions” to be evaluated if the ones above are False. The following block would only print Foo: value = 5 if value &amp;lt; 10 and value &amp;gt; 2: print(&quot;Foo&quot;) if value &amp;lt; 20: print(&quot;Bar&quot;) elif value &amp;lt; 30: print(&quot;Baz&quot;) else: print(&quot;Bat&quot;) The function of elif and else blocks can be emulated using if blocks only, but it is much less efficient. User input using input() is non-blocking: the script will continue running and will not wait for the user’s input unless the value is used in a later statement. input() can produce integers, floats or strings, depending on the type parameter given to it. Short answer questions Explain the role of indentation in blocks such as if/elif/else. Detail one practical example of how conditional statements can be used in scripts. What happens if a conversion function such as int() is used on a value that does not contain a number? Programming questions Revisit the temperature conversion problem of the last problem set and implement input validation for each of your conversion functions. If the value given to your function is below the minimum acceptable value, you should return the lowest converted value possible, and if the value is above the maximum acceptable value, you should return the highest converted value possible. Think of what the bounds of your input should be.</summary></entry><entry><title type="html">Control flow</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/conditionals.html" rel="alternate" type="text/html" title="Control flow" /><published>2018-02-12T10:05:23-05:00</published><updated>2018-02-12T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/conditionals</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/conditionals.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we discuss how &lt;strong&gt;boolean values&lt;/strong&gt; can be used as &lt;strong&gt;conditions&lt;/strong&gt;, and how structures called &lt;strong&gt;conditional statements&lt;/strong&gt; can help you add depth in your scripts’ behaviour by selectively executing statements based on parameters of your choosing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#boolean-exp&quot;&gt;Boolean expressions&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#comparison-ops&quot;&gt;Comparison operators&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#composite-statements&quot;&gt;Composite statements&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#variables-exp&quot;&gt;Variables in boolean expressions&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conditionals&quot;&gt;Conditional statements&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#if&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#elif&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; blocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#else&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; blocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#complete-model&quot;&gt;A complete model&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#concrete-example&quot;&gt;A concrete example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-input&quot;&gt;EXTRA: Basic user input&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;boolean-exp&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-boolean-expressions&quot;&gt;1. Boolean expressions&lt;/h1&gt;

&lt;p&gt;In the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/conditionals.html#primobj&quot;&gt;previous lesson&lt;/a&gt;, we mentioned how the &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; datatype was used to represent values that are either true or false. By themselves, these values aren’t very useful: their true purpose is to be the result of &lt;strong&gt;boolean expressions&lt;/strong&gt; that compare values of other types together.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;comparison-ops&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-comparison-operators&quot;&gt;1.1 Comparison operators&lt;/h2&gt;

&lt;p&gt;The same way that we can use arithmetic operators on numerical values to produce other numerical values (see &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/basics.html#ic-math&quot;&gt;Mathematical operations&lt;/a&gt;), Python includes a number of &lt;strong&gt;comparison operators&lt;/strong&gt; taken from algebraic inequations. The table below is a collection of such operators:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operator&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Significance&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Greater than&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2 &amp;gt; 1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Lesser than&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt; 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Greater or equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;5 &amp;gt;= 1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Lesser or equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt;= 5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 == 1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Not equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 != 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As an experiment, you can use the &lt;strong&gt;interactive Python console&lt;/strong&gt; and enter the statements in the &lt;em&gt;Example&lt;/em&gt; column of the last table: you should see that all of them evaluate to &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;. Similarly, you could modify those statements such that they result in &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;. These are called &lt;strong&gt;boolean expressions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that there also exist operators that do not deal with numbers. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; can be used between two strings (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Marc&quot; != &quot;marc&quot;&lt;/code&gt;) to compare their contents and &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; can be used to verify if an element is present in a collection (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;a&quot; in &quot;Marc&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Finally, any expression can be &lt;strong&gt;negated&lt;/strong&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;d&quot; not in &quot;Marc&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;composite-statements&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;12-composite-statements&quot;&gt;1.2 Composite statements&lt;/h2&gt;

&lt;p&gt;When we talked about &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/basics.html#ic-math&quot;&gt;mathematical operations&lt;/a&gt;), we mentioned that simple 2-operand mathematical statements can be combined into bigger, richer expressions. We could take &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + 1&lt;/code&gt; and combine it with &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * 8&lt;/code&gt; to obtain &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) + (2 * 8)&lt;/code&gt; using parentheses, for example.&lt;/p&gt;

&lt;p&gt;This usage of parentheses to combine simple statements into more complex ones also applies to boolean expressions, which can be connected together using &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As their names imply, these operators will allow you to specify whether both or either conditions involved in a combination need to be true for the whole expression to be true. Here are a few examples of &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; in action:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Statement&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Evaluates to&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(1 &amp;gt; 2) or (2 &amp;gt; 0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(1 &amp;gt; 2) an (2 &amp;gt; 0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;((1 &amp;gt; 0) and (2 &amp;gt; 0)) or (1 &amp;lt; 0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;((1 &amp;gt; 0) and (2 &amp;gt; 0)) and (1 &amp;lt; 0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Of course, any of the operators we mentioned before can be used to make up the simple expressions that are combined using &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variable-exp&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;13-variables-in-boolean-expressions&quot;&gt;1.3 Variables in boolean expressions&lt;/h2&gt;

&lt;p&gt;In the previous slew of examples, we used literal values to make up our expressions. This kind of expression is, evidently, not that interesting since it never changes. When we discussed &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/basics.html&quot;&gt;variables&lt;/a&gt;, we mentioned that they were &lt;strong&gt;symbolic replacements&lt;/strong&gt; for data: this means that you can use variables anywhere in boolean expressions - your expressions can now change based on variables that you set.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What is your age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;is_old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the present example, if the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;my_age&lt;/code&gt; is a number over 40, we will print the value &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, otherwise we will print &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;. If you are puzzled by &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt;, take a look at the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/quiz/basics-quiz.html&quot;&gt;previous lesson’s quiz, where &lt;code class=&quot;highlighter-rouge&quot;&gt;input(x)&lt;/code&gt; was introduced.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conditionals&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-conditional-statements&quot;&gt;2. Conditional statements&lt;/h1&gt;

&lt;p&gt;Now that we have established that we can use &lt;a href=&quot;#comparison-ops&quot;&gt;certain operators&lt;/a&gt; to obtain boolean values from the data we are manipulating, we can use the outcome of these expressions to guide which statements get executed and which do not. By using boolean expressions as &lt;strong&gt;conditions&lt;/strong&gt;, we can build blocks, called &lt;strong&gt;conditional blocks&lt;/strong&gt;, that will depend on their given condition(s) to be executed.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;if&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-if-blocks&quot;&gt;2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;The simplest conditional blocks are composed of one single unit: the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block. &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks have a singular mission: to execute the code they contain &lt;em&gt;if and only if&lt;/em&gt; the condition that defines them evaluates to &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Their general form is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Any code here is executed before the if block.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that gets executed if 'condition' is True&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Any code here is executed after the if block.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the event where the condition given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block is &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, the block is simply skipped. For example, we could selectively print a message based on a number input by the user:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number you entered was bigger than 10!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the previous snippet, the &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; call is only executed &lt;em&gt;if&lt;/em&gt; the number &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; satisfies the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block’s condition, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;number &amp;gt; 10&lt;/code&gt;. Any number that doesn’t meet this criterion will cause the condition to be &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block to be skipped entirely.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;elif&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-elif-blocks&quot;&gt;2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;Sometimes, the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block alone isn’t enough to describe the behaviour that we want to implement. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; is skipped if its condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks could be used in chain to implement the behaviour “if not the first, check another condition”:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is executed if condition1 == True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is executed if the first &quot;if&quot; failed but condition2 is True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This form however gets cumbersome very quickly if you have a series of other conditions to check because you always need to ensure that all the previous conditions are &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;; since the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks are independent from each other, a faulty set of conditions could potentially allow them both to be executed one after the other.&lt;/p&gt;

&lt;p&gt;To solve this issue and to simplify the implementation of that sort of behaviour, we introduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; statement. &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; is functionally the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, but stands for “else if”. In combination with an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, an &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; will only be executed if the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; it’s attached to is skipped. We could rewrite the previous block of code as:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is executed if condition1 == True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#&quot;elif&quot; implies that condition1  was False and checks condition2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This syntax really shines when you consider cases where you have multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; blocks:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is executed if condition1 == True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#&quot;elif&quot; implies that condition1  was False and checks condition2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#&quot;elif&quot; implies that condition1 and condition2 were False and checks condition3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#&quot;elif&quot; implies that condition1, condition2 and condition3  was False and checks condition4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we opted to use a contraption of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks alone, we would have to ensure that previous conditions did indeed fail before checking if the new condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;else&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;23-else-blocks&quot;&gt;2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; blocks&lt;/h2&gt;

&lt;p&gt;THe &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; blocks complements the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; blocks by providing a “catch-all” scenario. Whenever an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; is present following a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; blocks, it is executed &lt;em&gt;if and only if&lt;/em&gt; all the previous conditional blocks fail. This means that all the blocks that have conditions will be skipped and that the &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; block will be executed before the script can move on.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; requires no condition by definition: its condition could be expressed as “none of the previous conditions were true”.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code executed if condition1 is true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code executed if condition2 is true but condition1 is false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#If all else fails and both conditions are false, this is executed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;complete-model&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;24-a-complete-model&quot;&gt;2.4 A complete model&lt;/h2&gt;

&lt;p&gt;Combining all three conditional blocks, we can produce a general model for conditional elements. Any valid conditional structure should…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;…be opened by an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; block;
  &lt;em&gt;Note: Semantically, it wouldn’t make sense to open with an &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; or an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; since these both depend on a previous element being false.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;…feature zero or more &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; block, as needed;&lt;/li&gt;
  &lt;li&gt;…feature zero or one &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; block, as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The combination of blocks that will make up your conditional statements will depend on the behaviour you are trying to implement. As such, not all blocks are relevant to all conditional statements: sometimes, a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; is enough, but in other cases, several &lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt; blocks are needed to get it right.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
  Mandatory block for any conditional statement.
  &quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
  Optional block, can be present in multiples, as needed.
  &quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
  Optional block, can only be present once in a statement.
  &quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;concrete-example&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-a-concrete-example&quot;&gt;3. A concrete example&lt;/h1&gt;

&lt;p&gt;In the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html&quot;&gt;previous lesson’s problem set&lt;/a&gt;, we introduced a temperature conversion problem. If you experimented with different input values for your conversion process, you probably noticed that not all values are valid.&lt;/p&gt;

&lt;p&gt;For example, the absolute zero for Celsius degrees is -273.15C, which means that any value below that shouldn’t be converted and should be flagged as invalid. With conditional statements, input given to the conversion function (or collected from the user via &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt;) can be &lt;em&gt;validated&lt;/em&gt; such that only values within a valid range are considered.&lt;/p&gt;

&lt;p&gt;We could then add a conditional statement such as this one to ensure the validity of conversion results:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;273.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Return the minimal Fahrenheit value, or an error code.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Compute the conversion as usual&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;user-input&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-extra-basic-user-input&quot;&gt;4. EXTRA: Basic user input&lt;/h1&gt;

&lt;p&gt;The topic of user input was briefly discussed in the last &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html&quot;&gt;problem set&lt;/a&gt; and left to experimentation. In Python, user input can be gathered using the &lt;code class=&quot;highlighter-rouge&quot;&gt;input(x)&lt;/code&gt; function, which takes in a parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, that is printed as a prompt before the user gets to type in something and returns the user’s input.&lt;/p&gt;

&lt;p&gt;This kind of user input is called &lt;strong&gt;blocking&lt;/strong&gt; because the script will stop and wait after printing the prompt (&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;), only to resume when the user presses the return key.&lt;/p&gt;

&lt;p&gt;Because it is hard to predict exactly what he user will enter, user input is always considered to be a &lt;strong&gt;string&lt;/strong&gt;, this means that depending on what you are capturing, you might have to use the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/basics.html#operations-data-types&quot;&gt;conversion functions&lt;/a&gt; we have discussed earlier to adjust the datatype of the user’s input to your needs.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter a number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Here, we convert our string to an integer to be able to 
compare it to other numbers.
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_input_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_input_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number you entered was negative!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_input_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number was positive!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You entered 0.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Later, we will cover the scenario where we expect the user to enter a number and a non-numerical value is entered. This will be covered by &lt;strong&gt;exception-handling&lt;/strong&gt;. For now, we can simply assume that the user always answers our queries with the appropriate data.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Web scraping</title><link href="https://mcataford.github.io/TalkPythonToMe/workshops/webscraping.html" rel="alternate" type="text/html" title="Web scraping" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/workshops/webscraping</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/workshops/webscraping.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or method defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the [first section] of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called methods):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-creating-and-modifying-variables&quot;&gt;2.2 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this model, you can create variables of any of the types we’ve manipulated before:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Marc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since variables are symbolic replacements, we can then use those variables by inserting their names, &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; where appropriate. We could make use of concatenation with all three to produce a sentence with embedded data:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we’ve seen before, the calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt; will convert &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; from their respective primitive types to strings, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; will concatenate all those strings together into &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello! My name is Marc and I am 27 years old. I am 180.1 centimetres high.&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Python basics</title><link href="https://mcataford.github.io/TalkPythonToMe/lessons/basics.html" rel="alternate" type="text/html" title="Python basics" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/lessons/basics</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/lessons/basics.html">&lt;h1 id=&quot;in-this-lesson&quot;&gt;In this lesson&lt;/h1&gt;

&lt;p&gt;In this lesson, we will look at the &lt;strong&gt;interactive Python console&lt;/strong&gt;. We will explore the notion of &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;functions&lt;/strong&gt;, and review definitions that will follow us for the rest of our adventure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#ic&quot;&gt;Using the interactive console&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#ic-math&quot;&gt;Mathematical operations&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#primobj&quot;&gt;Primitives and Objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#operations-prim&quot;&gt;Operations on primitives&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#operations-obj&quot;&gt;Operations on objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#operations-data-type1&quot;&gt;Operations and data types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating&quot;&gt;Creating and modifying variables&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scripts&quot;&gt;Writing scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#functions&quot;&gt;Functions&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#indentation&quot;&gt;Indentation&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#commenting&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;ic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-using-the-interactive-console&quot;&gt;1. Using the interactive console&lt;/h1&gt;

&lt;p&gt;For the first part of this lesson, you can use the interactive console through a Command Prompt/Terminal (by opening a Command Prompt/Terminal and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;) or through IDLE. Since IDLE’s interactive console is just a graphical interface wrapped around the regular Python console, you shouldn’t see any difference in function.&lt;/p&gt;

&lt;p&gt;Before we get started, consider a few things about the interactive console:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;strong&gt;memory&lt;/strong&gt;. Any variable or function defined in the console will exist and be accessible until the console is terminated. This allows us to type long scripts one statement at a time and keep the results of each statement at hand for the next;&lt;/li&gt;
  &lt;li&gt;It can be terminated at any time by using the exit statement &lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;If the console is busy with a task, you can force termination using the Control/Command key and C, this is called a &lt;em&gt;keyboard interrupt&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Any statement that produces output will print out its output on the line following a statement;&lt;/li&gt;
  &lt;li&gt;You can view the contents of a variable at any time by using its name as a statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;ic-math&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-mathematical-operations&quot;&gt;1.1 Mathematical operations&lt;/h2&gt;

&lt;p&gt;The most basic thing the interactive console can do it basic arithmetic. If you use any mathematical operation as a statement, you should see the results printed below. All the basic operators taught in algebra are valid. As such, we can experiment and produce the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-math.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Various arithmetic operations in the console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that just like in classical algebra, you can use parentheses to group operations together, and chained operations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 1) * (12 * 50)&lt;/code&gt; can be composed from simpler ones.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-variables&quot;&gt;2. Variables&lt;/h1&gt;

&lt;p&gt;What differentiates the interactive console from a simple pocket calculator is its ability to store and manipulate different kinds of data. To achieve this, we will use &lt;strong&gt;variables&lt;/strong&gt;. Variables in Python are no different from their algebraic counterparts: they act as a &lt;strong&gt;symbolic replacement for data&lt;/strong&gt;. This means that once defined, a variable can be inserted in other operations and behave as if you had inserted the data is contains.&lt;/p&gt;

&lt;p&gt;Before we create our own, however, we should define a few basic &lt;strong&gt;data types&lt;/strong&gt; available in Python: these data types will determine what kind of data is stored in a variable and what sort of operations we can apply on said variable.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;primobj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-primitives-and-objects&quot;&gt;2.1 Primitives and Objects&lt;/h2&gt;

&lt;p&gt;Python data types can be separated into two classes: &lt;strong&gt;primitives&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. The separating criterion is fairly simple: primitives can be represented by a &lt;strong&gt;single numerical value&lt;/strong&gt; while objects require a bigger structure stored in memory, to which the variable points. Below are the three main primitive types we will be using most of the time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2000000&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Floating-point values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1.5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True or false binary values&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these types, we need to define at least one object type: the &lt;strong&gt;string&lt;/strong&gt;. Strings are collections of characters and can contain single characters, words, sentences and even entire books.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Strings, any set of character surrounded by single or double quotation marks&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, world!&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;A&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&quot;operations-prim&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-operations-on-primitives&quot;&gt;2.2 Operations on primitives&lt;/h2&gt;

&lt;p&gt;All of the arithmetic operations we have experimented with in the &lt;a href=&quot;#ic-math&quot;&gt;first section&lt;/a&gt; of this lesson are applicable to any primitive. In the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; values), those will be interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; respectively. As such, the following is possible:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/python_int_cli_2.png&quot; alt=&quot;Arithmetic in the console&quot; /&gt;
&lt;em&gt;Arithmetic using boolean values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This outlines what we said earlier: &lt;strong&gt;any primitive value can be represented as a number&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;operations-obj&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;23-operations-on-objects&quot;&gt;2.3 Operations on objects&lt;/h2&gt;

&lt;p&gt;Operations on objects are a bit trickier. Because objects are complex structures, no two object types have the same operations! Because object operations are defined on a case by case basis, we’ll look at the one object we considered so far: the string.&lt;/p&gt;

&lt;p&gt;While strings cannot be divided or subtracted from one another, two operations exist:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;, or the union of two or more strings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Multiplication&lt;/strong&gt;, or the act of repeating strings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first operation, concatenation, allows you to make longer strings out of shorter ones. This means that given three strings, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to form a new longer one that represents the sum of the three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string.png&quot; alt=&quot;Concatenation&quot; /&gt;
&lt;em&gt;Concatenating strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same way, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator will duplicate and concatenate strings. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot; * 2&lt;/code&gt; would result in the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hellohello&quot;&lt;/code&gt;; the initial string would be repeated twice, and the repetitions concatenated.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;operations-data-types&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;24-operations-and-data-types&quot;&gt;2.4 Operations and data types&lt;/h2&gt;

&lt;p&gt;The operations defined earlier only apply between items of the same type (either primitive or object). As such, while you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, you cannot concatenate a string to a number directly as either element has a different definition of what the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; should do. To solve this issue, you can &lt;strong&gt;convert&lt;/strong&gt; one data type to the other, when possible. To do so, we will introduce three functions (also called functions):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These conversions are limited: only strings representing numbers can be converted to proper numbers using &lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;, but any float, integer or boolean can be converted to a string using &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use these functions to combine data of different types. Using this, we could write the following statement:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I like Python.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without the type conversion, an error would occur:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mcataford.github.io/TalkPythonToMe/assets/console-string2.png&quot; alt=&quot;TypeError during concatenation&quot; /&gt;
&lt;em&gt;TypeError during concatenation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;25-creating-and-modifying-variables&quot;&gt;2.5 Creating and modifying variables&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous sections, we can easily manipulate raw data in the interactive console. However, one large issue that stops us from going forward is &lt;strong&gt;data persistence&lt;/strong&gt;. While we can apply operations on numbers and strings, we have yet to &lt;em&gt;save&lt;/em&gt; anything to memory! This is where &lt;strong&gt;variables&lt;/strong&gt; come in. As we said earlier, variables are &lt;strong&gt;symbolic replacements for data&lt;/strong&gt;. Once defined, a variable and the data is contains can be substituted in any other statement.&lt;/p&gt;

&lt;p&gt;Python being a &lt;strong&gt;soft-typed&lt;/strong&gt; language, we do not need to handle which data type each variable stores; the interpreter will handle that seamlessly as we use our variables. This results in a very simple model for the definition of variables:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this model, you can create variables of any of the types we’ve manipulated before:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Marc&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since variables are symbolic replacements, we can then use those variables by inserting their names, &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; where appropriate. We could make use of concatenation with all three to produce a sentence with embedded data:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we’ve seen before, the calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt; will convert &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; from their respective primitive types to strings, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; will concatenate all those strings together into &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello! My name is Marc and I am 27 years old. I am 180.1 centimetres high.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;scripts&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-writing-scripts&quot;&gt;3. Writing scripts&lt;/h1&gt;

&lt;p&gt;To progress further and to start building any sort of project, we will need to be able to execute a multitude of statements at once. To accomplish this, we will write &lt;strong&gt;scripts&lt;/strong&gt;, or sequences of statements that will be executed all at once instead of one-by-one as we did so far in the interactive console.&lt;/p&gt;

&lt;p&gt;To write a script, simply save a sequence of statements, one per line, in a file bearing the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.py&lt;/code&gt;. This will be called a &lt;strong&gt;Python script file&lt;/strong&gt;. To execute it all at once, we will not use the interactive console, as it is meant for line-by-line execution. We will turn out attention to IDLE.&lt;/p&gt;

&lt;p&gt;Using IDLE, you can create a new script file through the &lt;em&gt;File&lt;/em&gt; menu. This opens up a new window in which you can type your script. Just like any other text file, you can save and open scripts using IDLE; this way, you can revisit them later as needed. Once your script file contains statements and is saved, the &lt;em&gt;Run&lt;/em&gt; menu will allow you to execute your script file (&lt;em&gt;Run module&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example, consider the follow sample script: it contains our last experiment with concatenation:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;180.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Marc&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When executing your script, the interpreter will work its way from the top to the bottom and execute your statements one at a time. Since the interpreter is never aware of the whole file, it will only raise an error if it tries to execute a faulty statement.&lt;/p&gt;

&lt;p&gt;Notice the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt;. Since we are no longer in the interactive console, output is not longer automatically printed to the screen. The print function &lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt; will solve that issue by printing the string or variable given to it as parameter.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;functions&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-functions&quot;&gt;4. Functions&lt;/h1&gt;

&lt;p&gt;Functions are meant to be &lt;strong&gt;blocks of code you can reuse&lt;/strong&gt;. Just like functions in mathematics, they can accept input and produce output. Python has dozens of built-in functions, a few of which we’ve seen previously:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a string. This would, for example, convert the integer &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1&quot;&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, converts the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to an integer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;If possible, convers the value &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to a float.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Prints the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; to the screen.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As we go forward, we will add more functions to this list, but the most important part about Python functions isn’t that the language offers a lot of them out-of-the-box but rather than you can make your own.&lt;/p&gt;

&lt;p&gt;The basic model to &lt;strong&gt;define&lt;/strong&gt; a function introduces the &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; keyword:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is executed when the function is called.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few things to consider:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; keyword indicates that a function is being defined;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_function&lt;/code&gt; is the given name of our function, we will use it to call our function later (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;my_function()&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; is a &lt;strong&gt;comma-separated list&lt;/strong&gt; of items that will act as variables within the function;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword “hands back” the output of the function to whoever called the function. An example of this is &lt;code class=&quot;highlighter-rouge&quot;&gt;str(x)&lt;/code&gt;, which &lt;em&gt;returns&lt;/em&gt; a string made from the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reusing our previous example in which we build a string that introduced us, we could write a function that &lt;em&gt;returns&lt;/em&gt; our concatenated string and takes the three elements as input:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduce_myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once defined, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;introduce_myself()&lt;/code&gt; anywhere in our script and as long as we give it the right parameters (a string, an integer and a float, in that order), it will produce the right output.&lt;/p&gt;

&lt;p&gt;For example, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;introduce_myself(&quot;Marc&quot;, 27, 180.1)&lt;/code&gt; and get the same output string as before.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;indentation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;41-indentation&quot;&gt;4.1 Indentation&lt;/h2&gt;

&lt;p&gt;You might have noticed that not all lines are on the same level in the previous example. This is not for looks: it’s by design. Blocks of code such as functions use &lt;strong&gt;indentation&lt;/strong&gt; as delimiters in Python, each level being the equivalent of “brackets” that contain the block’s body.&lt;/p&gt;

&lt;p&gt;Every time we will declare a block (such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; statement in the previous example), we will give any following statement that is part of the block one extra level of indentation. As such, we will obtain a layout such as the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is in the function &quot;my_function1&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#Code that is in the function &quot;my_function2&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Code that is not in any of the function but that is in the file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Any code at this level is executed if you run your script.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that any code that is at the “base” level of your script is executed when your script is run.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;commenting&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;5-comments&quot;&gt;5. Comments&lt;/h1&gt;

&lt;p&gt;You might have noticed sentences embedded in code blocks on lines that start with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;. These are called &lt;strong&gt;comments&lt;/strong&gt;. Comments are notes left by the programmer to contextualize code, explain the logic of a certain block or provide guidance on things left to do or fix.&lt;/p&gt;

&lt;p&gt;You can add comments to your code two ways:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# You can write single-line comments using the hashbang sign before the comment text.&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
You can also use three consecutive quotation marks to open a block comment
that can span over multiple lines. Another set of three quotation marks will
close the block comment.
&quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comments are &lt;strong&gt;ignored&lt;/strong&gt; by the interpreter and do not alter the behaviour of your script. You are strongly encouraged to comment your code, as logic that is self-evident today might not remain so through time, and code that you would share might raise questions from other programmers.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this lesson</summary></entry><entry><title type="html">Python basics</title><link href="https://mcataford.github.io/TalkPythonToMe/quiz/basics-quiz.html" rel="alternate" type="text/html" title="Python basics" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/quiz/basics-quiz</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/quiz/basics-quiz.html">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/basics.html&quot;&gt;problem set&lt;/a&gt;, you implemented a function that prints a rectangle of variable width. Add another parameter to the function such that the user can also choose the &lt;em&gt;height&lt;/em&gt; of the rectangle.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Hint: This can be entirely implemented using the right operator and that the &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; character will insert a newline in a string, which may solve a lot of problems.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; function allows you to query the user for information. Any parameter that is given to it will be printed as a prompt before the script stops to wait for the user to type in something. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt;, can you modify your solution to &lt;em&gt;1.&lt;/em&gt; further such that it &lt;em&gt;asks&lt;/em&gt; the user which width and height to use to generate the rectangle? You should also have your function &lt;em&gt;print&lt;/em&gt; a sentence containing the width and height that were used.&lt;/p&gt;

    &lt;p&gt;__Note: here is an example of how &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; can be used based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;introduce_myself&lt;/code&gt; function we implemented before:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#This function is taken from the Python basics lesson text, under section 4 (Functions)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduce_myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot; years old. I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; centimetres high.&quot;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;

 &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
 We can query the user for each of the three values we need. Each time,
 we use an appropriate prompt for the user.

 Note that the same function is used to capture any of the values! We'll discuss this again later.
 &quot;&quot;&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What is your name?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;user_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;How old are you?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;user_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;How tall are you?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;introduce_myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">In the problem set, you implemented a function that prints a rectangle of variable width. Add another parameter to the function such that the user can also choose the height of the rectangle. Hint: This can be entirely implemented using the right operator and that the \n character will insert a newline in a string, which may solve a lot of problems.</summary></entry><entry><title type="html">Python basics</title><link href="https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html" rel="alternate" type="text/html" title="Python basics" /><published>2018-02-11T10:05:23-05:00</published><updated>2018-02-11T10:05:23-05:00</updated><id>https://mcataford.github.io/TalkPythonToMe/problems/basics-problems</id><content type="html" xml:base="https://mcataford.github.io/TalkPythonToMe/problems/basics-problems.html">&lt;h1 id=&quot;truefalse-questions&quot;&gt;True/False questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;strong&gt;interactive Python console&lt;/strong&gt; prints the output of an operation automatically.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt; operator implements two consecutive products such that &lt;code class=&quot;highlighter-rouge&quot;&gt;a**b = a * b * b&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Primitive data types&lt;/strong&gt; are types of data that can be represented as one or several numbers.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; is an example of a primitive type because each character of a string can be mapped to a number via the &lt;a href=&quot;&quot;&gt;ASCII table&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean values&lt;/strong&gt; can be represented as numbers.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; is represented by a collection of characters surrounded by &lt;strong&gt;double quotes&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; are two operators defined for &lt;strong&gt;strings&lt;/strong&gt;; other operators are not defined and will raise an error if used with string operands.&lt;/li&gt;
  &lt;li&gt;To concatenate two values, you must first convert them using &lt;code class=&quot;highlighter-rouge&quot;&gt;string(x)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can only concatenate two values at a time.&lt;/li&gt;
  &lt;li&gt;When defining variables, the &lt;strong&gt;data type&lt;/strong&gt; must be mentioned as well as the name and initial value.&lt;/li&gt;
  &lt;li&gt;Any statement that can be written in the interactive Python console can also be written in a script file.&lt;/li&gt;
  &lt;li&gt;Outside of the interactive console,  &lt;code class=&quot;highlighter-rouge&quot;&gt;print(x)&lt;/code&gt; will allow you to print output to the screen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt; are defined using the &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; keyword.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comments&lt;/strong&gt; are ignored by the interpreter, as such, you can include as many as you wish.&lt;/li&gt;
  &lt;li&gt;A script file can contain both space and tab &lt;strong&gt;indentation&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;short-answer-questions&quot;&gt;Short answer questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;What is &lt;strong&gt;concatenation&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator do on &lt;strong&gt;strings&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;What are two ways of adding &lt;strong&gt;comments&lt;/strong&gt; to your scripts?&lt;/li&gt;
  &lt;li&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword do?&lt;/li&gt;
  &lt;li&gt;What is the point of separating code into &lt;strong&gt;functions&lt;/strong&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;programming-questions&quot;&gt;Programming questions&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;For each of the following tasks, you should produce a separate script. Do not hesitate to use comments to document your design process and how your solutions work.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write a Celsius-to-Fahrenheit conversion script. Your final solution should implement the conversion as a &lt;strong&gt;function&lt;/strong&gt; which takes in a temperature in Celsius degrees and outputs a temperature in Fahrenheit degrees. You script should make use of your function and demonstrate the conversion with at least three values. &lt;em&gt;Make sure that your script outputs the results as part of a sentence in which numbers are embedded.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the script of Question 1, add a function that does the opposite conversion. Verify that any Celsius value can be converted to Fahrenheit and then back to Celsius without significant loss of precision.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Given a number such as &lt;code class=&quot;highlighter-rouge&quot;&gt;1.1234&lt;/code&gt;, write a script implementing a function that extracts the &lt;em&gt;fractional part&lt;/em&gt; of the number. You can use the function stub below:&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Hint: Think of what type conversion does to a number.&lt;/em&gt;&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_fractional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;#Your code&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;#Make sure to store your result in a variable and pass that variable to return.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;

 &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
 Your function should be able to accept the following input and produce the output:

 1.1234 -&amp;gt; 0.1234
 0 -&amp;gt; 0.0
 1.0 -&amp;gt; 0.0
 &quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a function that &lt;strong&gt;prints&lt;/strong&gt; the following shape:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;++++++++++&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;++++++++++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you modify the function in &lt;em&gt;4&lt;/em&gt; to allow the caller to give as input a parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;? You can leave the height of your shape constant such that the shape is a rectangle of variable width.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;If you opted to store your code on Github&lt;/strong&gt;, this is a great occasion to test out your ability to upload content in your repository! If you changed your mind and want to use it, go back to the &lt;a href=&quot;https://mcataford.github.io/TalkPythonToMe/lessons/getting-started.html#git&quot;&gt;Getting Started&lt;/a&gt; lesson to see how to set it up! You’ll also find the procedure to &lt;em&gt;commit&lt;/em&gt; and &lt;em&gt;push&lt;/em&gt; changes to Github there.&lt;/p&gt;</content><author><name></name></author><summary type="html">True/False questions</summary></entry></feed>